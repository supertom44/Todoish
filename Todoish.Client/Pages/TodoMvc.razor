@page "/todomvc"
@inherits AppComponentBase

<form @onsubmit="addTodo" class="max-w-xl">
    <CascadingValue Value=@errorStatus>

        <div class="flex my-8 justify-center">
            <span class="ml-1 sm:ml-4 text-xl sm:text-3xl text-gray-700">Todos Application</span>
        </div>

        <ErrorSummary Except=@VisibleFields/>

        <TextInput placeholder="What needs to be done?" @bind-Value="request.Title" Label=""/>

        @foreach (var group in filteredTodos())
        {
            <div class="mt-4 bg-white shadow-sm overflow-hidden rounded-md">

                <p class="fw-bold">@group.Key.ToShortDateString()</p>
                <ul role="list" class="divide-y divide-gray-200">
                    @foreach (var todo in group)
                    {
                        <li @key="todo.Id" class="px-6 py-4">
                            <div class="relative flex items-start" @onclick="_ => toggleTodo(todo.Id)">
                                <div class="flex items-center h-6">
                                    @if (todo.Done)
                                    {
                                        <span class="material-icons text-green-600 h-5 w-5">check_circle</span>
                                    }
                                    else
                                    {
                                        <span class="material-icons h-5 w-5">radio_button_unchecked</span>
                                    }
                                </div>
                                <div class="ml-3 flex-grow">
                                    <label class=@(todo.Done ? "line-through" : "")>@todo.Title</label>
                                </div>
                                <div>
                                    @if (todo.Done)
                                    {
                                        <span class="material-icons h-5 w-5" @onclick="_ => removeTodo(todo.Id)">delete_outline</span>
                                    }
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        }

        <div class="mt-4 flex justify-between">
            <div class="text-gray-400 leading-8 mr-4">
                @unfinishedTodos().Count() <span class="hidden sm:inline">item(s)</span> left
            </div>

            <div class="inline-flex shadow-sm rounded-md">
                <a href="#" @onclick:preventDefault class=@TabClass("rounded-l-lg border", filter == Filter.All) @onclick=@(() => filter = Filter.All)>
                    All
                </a>
                <a href="#" @onclick:preventDefault class=@TabClass("border-t border-b", filter == Filter.Unfinished) @onclick=@(() => filter = Filter.Unfinished)>
                    Active
                </a>
                <a href="#" @onclick:preventDefault class=@TabClass("rounded-r-md border", filter == Filter.Finished) @onclick=@(() => filter = Filter.Finished)>
                    Completed
                </a>
            </div>

            <div class="leading-8 ml-4">
                <a href="#" class=@(finishedTodos().Count() == 0 ? "invisible" : "") @onclick="_ => removeFinishedTodos()" @onclick:preventDefault>
                    clear <span class="hidden sm:inline">completed</span>
                </a>
            </div>
        </div>

        <div class="mt-5 text-center text-gray-400 flex justify-center -ml-6">
            <SrcLink href="https://github.com/NetCoreTemplates/blazor-wasm/blob/main/Todoish.ServiceInterface/TodosServices.cs" IconClass="oi oi-code"/>
            <SrcLink href="https://github.com/NetCoreTemplates/blazor-wasm/blob/main/Todoish.ServiceModel/Todos.cs" IconClass="oi oi-loop"/>
            <SrcLink href="https://github.com/NetCoreTemplates/blazor-wasm/blob/master/Todoish.Client/Pages/TodoMvc.razor" IconSrc="/img/blazor.svg"/>
        </div>

    </CascadingValue>
</form>
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

@code {

    enum Filter
    {
        All,
        Finished,
        Unfinished
    }

    static string[] VisibleFields = new[] {nameof(CreateTodo.Text)};

    string TabClass(string @class, bool isActive) =>
        ClassNames("border-gray-200 text-sm font-medium px-4 py-2 hover:bg-gray-100 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700",
            (isActive ? "text-blue-700 dark:bg-blue-600" : "text-gray-900 hover:text-blue-700 dark:bg-gray-700"), @class);

    List<TodoTask> todos = new();
    Filter filter = Filter.All;

    CreateTask request = new()
    {
        Done = false,
        DueDate = DateTime.Today
    };
    ResponseStatus? errorStatus;
    List<IGrouping<DateTime, TodoTask>> grouped = new();

    IEnumerable<IGrouping<DateTime, TodoTask>> filteredTodos() => filter switch
    {
        Filter.Finished => finishedTodos().GroupBy(x => x.DueDate),
        Filter.Unfinished => unfinishedTodos().GroupBy(x => x.DueDate),
        _ => todos.GroupBy(x => x.DueDate)
        };

    IEnumerable<TodoTask> finishedTodos() => todos.Where(x => x.Done);
    IEnumerable<TodoTask> unfinishedTodos() => todos.Where(x => !x.Done);

    protected override async Task OnInitializedAsync() => await refreshTodos();

    // For best UX: apply changes locally then revalidate with real server state
    async Task refreshTodos()
    {
        var api = await ApiAsync(new QueryTask());
        if (api.Succeeded)
        {
            todos = api.Response!.Results;
        }
        else
            errorStatus = api.Error;
    }

    async Task addTodo()
    {
        errorStatus = null;
        todos.Add(new TodoTask {Title = request.Title, Done = false, DueDate = DateTime.Today});
        var api = await ApiAsync(request);
        if (api.Succeeded)
            request.Title = "";
        else
            errorStatus = api.Error;
        await refreshTodos();
    }

    async Task removeTodo(long id)
    {
        todos.RemoveAll(x => x.Id == id);
        var api = await ApiAsync(new DeleteTodo {Id = id});
        errorStatus = api.Error;
        await refreshTodos();
    }

    async Task removeFinishedTodos()
    {
    // var ids = todos.Where(x => x.Done).Select(x => x.Id).ToList();
    // if (ids.Count == 0) return;
    // todos.RemoveAll(x => ids.Contains(x.Id));
    // var api = await ApiAsync(new DeleteTodos { Ids = ids });
    // errorStatus = api.Error;
    // await refreshTodos();
    }

    async Task toggleTodo(long id)
    {
        var todo = todos.Find(x => x.Id == id)!;
        todo.Done = !todo.Done;
        var api = await ApiAsync(new UpdateTask() {Id = todo.Id, Title = todo.Title, Done = todo.Done, DueDate = todo.DueDate});
        errorStatus = api.Error;
        await refreshTodos();
    }
    }

